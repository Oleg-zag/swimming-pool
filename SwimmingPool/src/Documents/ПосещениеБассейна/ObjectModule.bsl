
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область ОбработчикиСобытий

// Код процедур и функций
Процедура ОбработкаПроведения(Отказ, Режим)
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	// регистр АктивныеПосещения Расход
	Движения.АктивныеПосещения.Записывать = Истина;
	Движения.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
		|	АктивныеПосещенияОстатки.КоличествоПосещенийОстаток,
		|	АктивныеПосещенияОстатки.ВидыБассейнов
		|ИЗ
		|	РегистрНакопления.АктивныеПосещения.Остатки(, Основание = &Основание) КАК АктивныеПосещенияОстатки";
	Запрос.УстановитьПараметр("Основание", Основание);
	Выборка = Запрос.Выполнить().Выбрать();
	ОсталосьПосещений = 0;
	ВидБассейнаАбонемента = Неопределено;
	Если Выборка.Следующий() Тогда
		ОсталосьПосещений = Выборка.КоличествоПосещенийОстаток;
		ВидБассейнаАбонемента = Выборка.ВидыБассейнов;
	КонецЕсли;
	
	Если ОсталосьПосещений < 1 Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "В билете не осталось посещений";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Поле = "Основание";
		Сообщение.Сообщить();
	КонецЕсли;
	
	ВидБассейнаДокумента = ВидБассейна(Бассейн);
	
	Если ЗначениеЗаполнено(ВидБассейнаДокумента) 
		И  ВидБассейнаДокумента <> ВидБассейнаАбонемента Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Билет не подходит для посещения этого бассейна";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Поле = "Основание";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Движения.АктивныеПосещения.Записывать = Истина;
	Движение = Движения.АктивныеПосещения.Добавить();
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	Движение.Период = Дата;
	Движение.Основание = Основание;
	Движение.ВидыБассейнов = ВидБассейна(ВидБассейнаАбонемента);
	Движение.КоличествоПосещений = 1;
	
	
	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВидБассейна(ВидыБассейнов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыБассейнов.ВидБассейна
	|ИЗ
	|	Справочник.ВидыБассейнов КАК ВидыБассейнов
	|ГДЕ
	|	ВидыБассейнов.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",ВидыБассейнов);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ВидБассейна;
	
КонецФункции

#КонецОбласти

#Область Инициализация

#КонецОбласти

#КонецЕсли
