






#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Элементы.СписокНоменклатуры.Видимость = Ложь;
	Элементы.ДекорацияБаллыКлиента.Видимость = Ложь;
	
	СоздатьДекорацииИзбранныхТоваров();
	ЗаполнитьИзбранныеТоварыКлиента();
	
	
КонецПроцедуры




#КонецОбласти



#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура БаллыКСписаниюПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры


&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	
	КлиентПриИзмененииНаСервере();
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНоменклатуры //<ИмяТаблицыФормы>

&НаКлиенте
Процедура СписокНоменклатурыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если ДанныеСтроки.ЭтоГруппа Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	Значение = Новый Структура;
	Значение.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
	Значение.Вставить("Цена", ДанныеСтроки.Цена);
	
	ПараметрыПеретаскивания.Значение = Значение;
	
КонецПроцедуры







&НаКлиенте
Процедура СписокНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = 	Элемент.ТекущиеДанные;

	Если ДанныеСтроки.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Фильтр = Новый Структура;
	Фильтр.Вставить("Номенклатура", ВыбраннаяСтрока);
	
	НайденныеСтроки = ПозицииПродажи.НайтиСтроки(Фильтр);
	
	Если НайденныеСтроки.Количество()> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Строка = ПозицииПродажи.Добавить();
	Строка.Номенклатура = ВыбраннаяСтрока;
	Строка.Цена = ДанныеСтроки.Цена;
	Строка.Количество = 1;
	Строка.Сумма = ДанныеСтроки.Цена;
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПозицииПродажиНоменклатураПриИзменении(Элемент)

	ДанныеСтроки = Элементы.ПозицииПродажи.ТекущиеДанные;
	ДанныеСтроки.Цена = ЦенаНоменклатуры(ДанныеСтроки.Номенклатура);
	РассчитатьСуммуСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицииПродажиЦенаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ПозицииПродажи.ТекущиеДанные;
	РассчитатьСуммуСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицииПродажиКоличетсвоПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ПозицииПродажи.ТекущиеДанные;
	РассчитатьСуммуСтроки(ДанныеСтроки);
	
КонецПроцедуры



&НаСервереБезКонтекста
Функция ЦенаНоменклатуры(Знач Номенклатура)
	
	Возврат РегистрыСведений.ЦеныНоменклатуры.ЦенаНоменклатуры(Номенклатура, ТекущаяДатаСеанса());
		
КонецФункции



#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПозицииПродажи

&НаКлиенте
Процедура ПозицииПродажиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Значение = ПараметрыПеретаскивания.Значение;
	
	Если ТипЗнч(Значение) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьУникальнуюПозицию(Значение.Номенклатура, Значение.Цена);
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицииПродажиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьПрродажу(Команда)
	
	НовыйДокмент = ЗаписатьПрродажуНаСервере();
	
	ОповеститьОбИзменении(НовыйДокмент);
	ПоказатьОповещениеПользователя("Создан документ",
		ПолучитьНавигационнуюСсылку(НовыйДокмент),
		Строка(НовыйДокмент),,,);
	
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	Элементы.СписокНоменклатуры.Видимость = Не Элементы.СписокНоменклатуры.Видимость;
	
	Элементы.ПозицииПродажиПодбор.Пометка = Элементы.СписокНоменклатуры.Видимость;
	
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ДобавитьУникальнуюПозицию(Номенклатура, Цена)
	
	
	Фильтр = Новый Структура;
	Фильтр.Вставить("Номенклатура", Номенклатура);
	
	НайденныеСтроки = ПозицииПродажи.НайтиСтроки(Фильтр);
	
	Если НайденныеСтроки.Количество()> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Строка = ПозицииПродажи.Добавить();
	Строка.Номенклатура = Номенклатура;
	Строка.Цена = Цена;
	Строка.Количество = 1;
	Строка.Сумма = Цена;
	
	РассчитатьСуммуДокумента();
	
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуСтроки(ДанныеСтроки)
	
	ДанныеСтроки.Сумма =  ДанныеСтроки.Цена * ДанныеСтроки.Количество;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	
	СуммаИтого = ПозицииПродажи.Итог("Сумма") - БаллыКСписанию;
	ЗаполнитьДекорациюБаллыКлиента();
КонецПроцедуры




&НаКлиенте
Процедура ПозицииПродажиПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаСервере
функция ЗаписатьПрродажуНаСервере()
	
	ДокОбъект = Документы.ПродажаБилетов.СоздатьДокумент();
	
	Докобъект.Заполнить(Неопределено);
	
	ДокОбъект.Дата = ТекущаяДатаСеанса();
	
	ДокОбъект.Клиент = Клиент;
	ДокОбъект.ПозицииПродажи.Загрузить(ПозицииПродажи.Выгрузить());
	ДокОбъект.БаллыКСписанию = БаллыКСписанию;
	ДокОбъект.СуммаДокумента = СуммаИтого - БаллыКСписанию;
	
	Если Не ДокОбъект.ПроверитьЗаполнение() Тогда
		ВызватьИсключение "Не Удалось записать продажу";
	КонецЕсли;
	
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	СброситьЗаполнениеФормы();
	
	Возврат Докобъект.Ссылка;
КонецФункции

&НаСервере
Процедура СброситьЗаполнениеФормы()
	
	Клиент = Справочники.Клиенты.ПустаяСсылка();
	ПозицииПродажи.Очистить();
	СуммаИтого = 0;
	БаллыКСписанию = 0;
	ЗаполнитьДекорациюБаллыКлиента();
	ЗаполнитьИзбранныеТоварыКлиента();
	СброситьИзбранныеТовары();
КонецПроцедуры

&НаСервере
Процедура КлиентПриИзмененииНаСервере()

	ЗаполнитьДекорациюБаллыКлиента();
	
	ЗаполнитьИзбранныеТоварыКлиента();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзбранныеТоварыКлиента();
	
	СброситьИзбранныеТовары();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 3
		|	ПродажиОбороты.Номенклатура
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&НачалоПериода, &КонецПериода,,Клиент = &Клиент) КАК ПродажиОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПродажиОбороты.СуммаОборот УБЫВ";
	Запрос.УстановитьПараметр("НачалоПериода", ДобавитьМесяц(ТекущаяДатаСеанса(), -3));
	Запрос.УстановитьПараметр("КонецПериода", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Клиент", Клиент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Сч = 0;
	
	Пока Выборка.Следующий() Цикл
		
		ТекущаяСтрока = ДинамическиеЭлементы[Сч];
		ТекущаяСтрока.Активность = Истина;
		ТекущаяСтрока.Номенклатура = Выборка.Номенклатура;
		Сч = Сч + 1;
	КонецЦикла;
	
	ЗаполнитьДекорацииИзбранныхТоваров();
	
КонецПроцедуры

&НаСервере
Процедура СброситьИзбранныеТовары()
	
	Для Каждого Строка Из ДинамическиеЭлементы Цикл
		Строка.Активность = Ложь;
		Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	КонецЦикла;	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьДекорацииИзбранныхТоваров();
	
	
	Для Каждого Строка Из ДинамическиеЭлементы Цикл
		
		Элемент = Элементы[Строка.ИмяЭлемента];
		Элемент.Видимость = Строка.Активность;
		Элемент.Заголовок = Строка.Номенклатура;
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьДекорацииИзбранныхТоваров()
	
	
	КоличетсвоИзбранныхТоваров = 3;
	
	Для Сч = 1 По КоличетсвоИзбранныхТоваров Цикл
		
		ИмяДекорации = "ДекорацияИзбранныхТоваров_"+XMLСтрока(Сч);
		
		Декорация = Элементы.Добавить(ИмяДекорации, Тип("ДекорацияФормы"),Элементы.ГруппаПопулярныеПокупки);
		Декорация.Вид = ВидДекорацииФормы.Надпись;
		Декорация.Видимость = Ложь;
		Декорация.Гиперссылка = Истина;
		Декорация.УстановитьДействие("Нажатие", "Подключаемый_ДекорацияИзбранныхТоваровНажатие");
		СтрокаОписанияДекорации = ДинамическиеЭлементы.Добавить();
		СтрокаОписанияДекорации.ИмяЭлемента = ИмяДекорации;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДекорациюБаллыКлиента()
	
	Если Не ЗначениеЗаполнено(Клиент) Тогда
		Элементы.ДекорацияБаллыКлиента.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияБаллыКлиента.Видимость = Истина;
	Запрос = Новый Запрос();
	Запрос.Текст ="ВЫБРАТЬ
		|	БонусныеБаллыКлиентовОстатки.СуммаОстаток
		|ИЗ
		|	РегистрНакопления.БонусныеБаллыКлиентов.Остатки(, Клиент = &Клиент) КАК БонусныеБаллыКлиентовОстатки";
	Запрос.УстановитьПараметр("Клиент",Клиент);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		ОстатокБаллов = Выборка.СуммаОстаток;
	Иначе 
		ОстатокБаллов = 0;
	КонецЕсли;
	Если ОстатокБаллов = 0 Тогда
		Элементы.ДекорацияБаллыКлиента.Заголовок = "У клиента нет баллов";
		Возврат;
	КонецЕсли;
	
	МаксимальнаяДоля = Константы.МаксимальнаяДоляОплатыБаллами.Получить();
	МаксимумБалловКСписанию = Мин(ОстатокБаллов, СуммаИтого*МаксимальнаяДоля/100);
	
	Шаблон = "Накоплено %1 баллов, из них можно списать %2. ";
	Описание = СтрШаблон(Шаблон,
		ОстатокБаллов,
		МаксимумБалловКСписанию);
	
	ШаблонСсылки = "#Заполнить_%1";
	СсылказаполненияБаллов = СтрШаблон(ШаблонСсылки,
		XMLСтрока(МаксимумБалловКСписанию));
		
	ЧастиФорматированнойСтроки = Новый Массив;
	ЧастиФорматированнойСтроки.Добавить(Описание);
	ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока("Заполнить",,,,СсылказаполненияБаллов));
	
	Элементы.ДекорацияБаллыКлиента.Заголовок = Новый ФорматированнаяСтрока(ЧастиФорматированнойСтроки);
		
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияБаллыКлиентаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки,"#Заполнить_") Тогда
		СтандартнаяОбработка = Ложь;
		БаллыКСписанию = СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки,"#Заполнить_", "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДекорацияИзбранныхТоваровНажатие(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	
	Фильтр = Новый Структура("ИмяЭлемента", ИмяЭлемента);
	НайденныеСтроки = ДинамическиеЭлементы.НайтиСтроки(Фильтр);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Строка = НайденныеСтроки[0];
	
	Номенклатура = Строка.Номенклатура;
	
	ДобавитьУникальнуюПозицию(Номенклатура, ЦенаНоменклатуры(Номенклатура));
	
КонецПроцедуры

#КонецОбласти
